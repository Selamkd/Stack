[
  {
    "title": "insertOne()",
    "answer": "Inserts a single document into a collection.\n\nSyntax: db.collection.insertOne(document, options)\n\nExample:\ndb.users.insertOne({\n  name: \"John Doe\",\n  email: \"john@email.com\",\n  age: 28\n})\n\nReturns: { acknowledged: true, insertedId: ObjectId(\"...\") }",
    "category": "674a1b2c3d4e5f6789012345",
    "tags": ["674a1b2c3d4e5f6789012346", "674a1b2c3d4e5f6789012347"],
    "isStarred": true
  },
  {
    "title": "insertMany()",
    "answer": "Inserts multiple documents into a collection.\n\nSyntax: db.collection.insertMany([document1, document2, ...], options)\n\nExample:\ndb.products.insertMany([\n  { name: \"Laptop\", price: 999.99 },\n  { name: \"Mouse\", price: 29.99 }\n])\n\nReturns: { acknowledged: true, insertedIds: [ObjectId(\"...\"), ObjectId(\"...\")] }",
    "category": "674a1b2c3d4e5f6789012345",
    "tags": ["674a1b2c3d4e5f6789012346", "674a1b2c3d4e5f6789012347"],
    "isStarred": false
  },
  {
    "title": "find()",
    "answer": "Retrieves multiple documents that match the query criteria.\n\nSyntax: db.collection.find(query, projection)\n\nExamples:\n// Find all documents\ndb.users.find()\n\n// Find with criteria\ndb.users.find({ age: { $gte: 25 } })\n\n// Find with projection\ndb.users.find({}, { name: 1, email: 1, _id: 0 })",
    "category": "674a1b2c3d4e5f6789012348",
    "tags": ["674a1b2c3d4e5f6789012349", "674a1b2c3d4e5f678901234a"],
    "isStarred": true
  },
  {
    "title": "findOne()",
    "answer": "Retrieves the first document that matches the query criteria.\n\nSyntax: db.collection.findOne(query, projection)\n\nExamples:\n// Find one user by email\ndb.users.findOne({ email: \"john@email.com\" })\n\n// Find cheapest product\ndb.products.findOne({}, { sort: { price: 1 } })",
    "category": "674a1b2c3d4e5f6789012348",
    "tags": ["674a1b2c3d4e5f6789012349", "674a1b2c3d4e5f678901234a"],
    "isStarred": false
  },
  {
    "title": "updateOne()",
    "answer": "Updates the first document that matches the query criteria.\n\nSyntax: db.collection.updateOne(filter, update, options)\n\nExamples:\n// Update user's age\ndb.users.updateOne(\n  { email: \"john@email.com\" },\n  { $set: { age: 29 } }\n)\n\n// Add to array\ndb.users.updateOne(\n  { name: \"John\" },\n  { $push: { hobbies: \"photography\" } }\n)",
    "category": "674a1b2c3d4e5f678901234b",
    "tags": ["674a1b2c3d4e5f678901234c", "674a1b2c3d4e5f678901234d"],
    "isStarred": true
  },
  {
    "title": "updateMany()",
    "answer": "Updates all documents that match the query criteria.\n\nSyntax: db.collection.updateMany(filter, update, options)\n\nExamples:\n// Increase all prices by 10%\ndb.products.updateMany(\n  {},\n  { $mul: { price: 1.1 } }\n)\n\n// Add discount to electronics\ndb.products.updateMany(\n  { category: \"Electronics\" },\n  { $set: { discount: 0.05 } }\n)",
    "category": "674a1b2c3d4e5f678901234b",
    "tags": ["674a1b2c3d4e5f678901234c", "674a1b2c3d4e5f678901234d"],
    "isStarred": false
  },
  {
    "title": "deleteOne()",
    "answer": "Deletes the first document that matches the query criteria.\n\nSyntax: db.collection.deleteOne(filter)\n\nExamples:\n// Delete specific user\ndb.users.deleteOne({ email: \"john@email.com\" })\n\n// Delete oldest user\ndb.users.deleteOne({}, { sort: { age: -1 } })\n\nReturns: { acknowledged: true, deletedCount: 1 }",
    "category": "674a1b2c3d4e5f678901234e",
    "tags": ["674a1b2c3d4e5f678901234f", "674a1b2c3d4e5f6789012350"],
    "isStarred": false
  },
  {
    "title": "deleteMany()",
    "answer": "Deletes all documents that match the query criteria.\n\nSyntax: db.collection.deleteMany(filter)\n\nExamples:\n// Delete all out-of-stock products\ndb.products.deleteMany({ stock: 0 })\n\n// Delete all users over 65\ndb.users.deleteMany({ age: { $gt: 65 } })\n\nWarning: db.collection.deleteMany({}) deletes ALL documents!",
    "category": "674a1b2c3d4e5f678901234e",
    "tags": ["674a1b2c3d4e5f678901234f", "674a1b2c3d4e5f6789012350"],
    "isStarred": true
  },
  {
    "title": "$set",
    "answer": "Sets the value of a field in a document.\n\nSyntax: { $set: { field: value } }\n\nExamples:\n// Set single field\ndb.users.updateOne(\n  { _id: ObjectId(\"...\") },\n  { $set: { age: 30 } }\n)\n\n// Set multiple fields\ndb.users.updateOne(\n  { name: \"John\" },\n  { $set: { age: 30, city: \"New York\" } }\n)",
    "category": "674a1b2c3d4e5f6789012351",
    "tags": ["674a1b2c3d4e5f678901234c", "674a1b2c3d4e5f6789012352"],
    "isStarred": true
  },
  {
    "title": "$inc",
    "answer": "Increments the value of a numeric field by a specified amount.\n\nSyntax: { $inc: { field: amount } }\n\nExamples:\n// Increment age by 1\ndb.users.updateOne(\n  { name: \"John\" },\n  { $inc: { age: 1 } }\n)\n\n// Decrease stock by 5\ndb.products.updateOne(\n  { name: \"Laptop\" },\n  { $inc: { stock: -5 } }\n)",
    "category": "674a1b2c3d4e5f6789012351",
    "tags": ["674a1b2c3d4e5f678901234c", "674a1b2c3d4e5f6789012353"],
    "isStarred": false
  },
  {
    "title": "$push",
    "answer": "Adds an element to an array field.\n\nSyntax: { $push: { arrayField: value } }\n\nExamples:\n// Add hobby to user\ndb.users.updateOne(\n  { name: \"John\" },\n  { $push: { hobbies: \"reading\" } }\n)\n\n// Add multiple items\ndb.users.updateOne(\n  { name: \"John\" },\n  { $push: { hobbies: { $each: [\"swimming\", \"coding\"] } } }\n)",
    "category": "674a1b2c3d4e5f6789012351",
    "tags": ["674a1b2c3d4e5f6789012354", "674a1b2c3d4e5f6789012355"],
    "isStarred": true
  },
  {
    "title": "$pull",
    "answer": "Removes elements from an array that match a specified condition.\n\nSyntax: { $pull: { arrayField: condition } }\n\nExamples:\n// Remove specific hobby\ndb.users.updateOne(\n  { name: \"John\" },\n  { $pull: { hobbies: \"reading\" } }\n)\n\n// Remove based on condition\ndb.products.updateOne(\n  { name: \"Bundle\" },\n  { $pull: { items: { price: { $lt: 10 } } } }\n)",
    "category": "674a1b2c3d4e5f6789012351",
    "tags": ["674a1b2c3d4e5f6789012354", "674a1b2c3d4e5f6789012355"],
    "isStarred": false
  },
  {
    "title": "$gt",
    "answer": "Matches values that are greater than a specified value.\n\nSyntax: { field: { $gt: value } }\n\nExamples:\n// Find users older than 25\ndb.users.find({ age: { $gt: 25 } })\n\n// Find expensive products\ndb.products.find({ price: { $gt: 100 } })\n\n// Works with dates too\ndb.orders.find({ createdAt: { $gt: new Date(\"2024-01-01\") } })",
    "category": "674a1b2c3d4e5f6789012356",
    "tags": ["674a1b2c3d4e5f6789012357", "674a1b2c3d4e5f6789012358"],
    "isStarred": true
  },
  {
    "title": "$lt",
    "answer": "Matches values that are less than a specified value.\n\nSyntax: { field: { $lt: value } }\n\nExamples:\n// Find young users\ndb.users.find({ age: { $lt: 30 } })\n\n// Find cheap products\ndb.products.find({ price: { $lt: 50 } })\n\n// Combine with other operators\ndb.products.find({ price: { $gt: 10, $lt: 100 } })",
    "category": "674a1b2c3d4e5f6789012356",
    "tags": ["674a1b2c3d4e5f6789012357", "674a1b2c3d4e5f6789012358"],
    "isStarred": false
  },
  {
    "title": "$in",
    "answer": "Matches any of the values specified in an array.\n\nSyntax: { field: { $in: [value1, value2, ...] } }\n\nExamples:\n// Find users in specific cities\ndb.users.find({ city: { $in: [\"New York\", \"London\", \"Tokyo\"] } })\n\n// Find products in categories\ndb.products.find({ category: { $in: [\"Electronics\", \"Books\"] } })\n\n// Works with numbers too\ndb.products.find({ rating: { $in: [4, 5] } })",
    "category": "674a1b2c3d4e5f6789012356",
    "tags": ["674a1b2c3d4e5f6789012357", "674a1b2c3d4e5f6789012359"],
    "isStarred": true
  },
  {
    "title": "$and",
    "answer": "Joins query clauses with a logical AND - returns documents that match all conditions.\n\nSyntax: { $and: [ { condition1 }, { condition2 }, ... ] }\n\nExamples:\n// Find users aged 25-35 in New York\ndb.users.find({\n  $and: [\n    { age: { $gte: 25 } },\n    { age: { $lte: 35 } },\n    { city: \"New York\" }\n  ]\n})\n\n// Usually implicit\ndb.users.find({ age: { $gte: 25, $lte: 35 }, city: \"New York\" })",
    "category": "674a1b2c3d4e5f6789012356",
    "tags": ["674a1b2c3d4e5f678901235a", "674a1b2c3d4e5f6789012357"],
    "isStarred": false
  },
  {
    "title": "$or",
    "answer": "Joins query clauses with a logical OR - returns documents that match any condition.\n\nSyntax: { $or: [ { condition1 }, { condition2 }, ... ] }\n\nExamples:\n// Find users in NY or London\ndb.users.find({\n  $or: [\n    { city: \"New York\" },\n    { city: \"London\" }\n  ]\n})\n\n// Find cheap or highly rated products\ndb.products.find({\n  $or: [\n    { price: { $lt: 20 } },\n    { rating: { $gte: 4.5 } }\n  ]\n})",
    "category": "674a1b2c3d4e5f6789012356",
    "tags": ["674a1b2c3d4e5f678901235a", "674a1b2c3d4e5f6789012357"],
    "isStarred": true
  },
  {
    "title": "sort()",
    "answer": "Orders query results by specified field(s).\n\nSyntax: .sort({ field: 1 }) // ascending or .sort({ field: -1 }) // descending\n\nExamples:\n// Sort by price ascending\ndb.products.find().sort({ price: 1 })\n\n// Sort by price descending\ndb.products.find().sort({ price: -1 })\n\n// Sort by multiple fields\ndb.products.find().sort({ category: 1, price: -1 })",
    "category": "674a1b2c3d4e5f678901235b",
    "tags": ["674a1b2c3d4e5f678901235c", "674a1b2c3d4e5f678901235d"],
    "isStarred": true
  },
  {
    "title": "limit()",
    "answer": "Restricts the number of documents returned by a query.\n\nSyntax: .limit(number)\n\nExamples:\n// Get first 5 products\ndb.products.find().limit(5)\n\n// Get 3 most expensive products\ndb.products.find().sort({ price: -1 }).limit(3)\n\n// Often combined with sort and skip\ndb.users.find().sort({ age: -1 }).skip(10).limit(5)",
    "category": "674a1b2c3d4e5f678901235b",
    "tags": ["674a1b2c3d4e5f678901235c", "674a1b2c3d4e5f678901235e"],
    "isStarred": false
  },
  {
    "title": "skip()",
    "answer": "Skips a specified number of documents in query results.\n\nSyntax: .skip(number)\n\nExamples:\n// Skip first 10 documents\ndb.products.find().skip(10)\n\n// Pagination: Get page 3 (10 per page)\ndb.products.find().skip(20).limit(10)\n\n// Get second page of results\nconst page = 2;\nconst perPage = 5;\ndb.products.find().skip((page - 1) * perPage).limit(perPage)",
    "category": "674a1b2c3d4e5f678901235b",
    "tags": ["674a1b2c3d4e5f678901235c", "674a1b2c3d4e5f678901235f"],
    "isStarred": false
  },
  {
    "title": "aggregate()",
    "answer": "Processes data through a pipeline of stages for complex operations.\n\nSyntax: db.collection.aggregate([stage1, stage2, ...])\n\nExamples:\n// Group by category and count\ndb.products.aggregate([\n  {\n    $group: {\n      _id: \"$category\",\n      count: { $sum: 1 },\n      avgPrice: { $avg: \"$price\" }\n    }\n  }\n])\n\n// Match, sort, and limit\ndb.products.aggregate([\n  { $match: { price: { $gte: 50 } } },\n  { $sort: { price: -1 } },\n  { $limit: 5 }\n])",
    "category": "674a1b2c3d4e5f6789012360",
    "tags": ["674a1b2c3d4e5f6789012361", "674a1b2c3d4e5f6789012362"],
    "isStarred": true
  },
  {
    "title": "createIndex()",
    "answer": "Creates an index on a collection to improve query performance.\n\nSyntax: db.collection.createIndex({ field: 1 }, options)\n\nExamples:\n// Create ascending index\ndb.users.createIndex({ email: 1 })\n\n// Create compound index\ndb.products.createIndex({ category: 1, price: -1 })\n\n// Create text index for search\ndb.articles.createIndex({ title: \"text\", content: \"text\" })\n\n// Create unique index\ndb.users.createIndex({ email: 1 }, { unique: true })",
    "category": "674a1b2c3d4e5f6789012363",
    "tags": ["674a1b2c3d4e5f6789012364", "674a1b2c3d4e5f6789012365"],
    "isStarred": true
  },
  {
    "title": "countDocuments()",
    "answer": "Returns the count of documents that match the query criteria.\n\nSyntax: db.collection.countDocuments(filter)\n\nExamples:\n// Count all documents\ndb.users.countDocuments()\n\n// Count with filter\ndb.users.countDocuments({ age: { $gte: 18 } })\n\n// Count products in category\ndb.products.countDocuments({ category: \"Electronics\" })\n\nNote: Use countDocuments() instead of deprecated count() method.",
    "category": "674a1b2c3d4e5f678901235b",
    "tags": ["674a1b2c3d4e5f6789012366", "674a1b2c3d4e5f6789012367"],
    "isStarred": false
  },
  {
    "title": "distinct()",
    "answer": "Returns an array of distinct values for a specified field across a collection.\n\nSyntax: db.collection.distinct(field, query)\n\nExamples:\n// Get all unique categories\ndb.products.distinct(\"category\")\n\n// Get unique cities for users over 25\ndb.users.distinct(\"city\", { age: { $gt: 25 } })\n\n// Get unique tags\ndb.articles.distinct(\"tags\")\n\nUseful for populating dropdown lists or analyzing data variety.",
    "category": "674a1b2c3d4e5f678901235b",
    "tags": ["674a1b2c3d4e5f6789012366", "674a1b2c3d4e5f6789012368"],
    "isStarred": false
  },
  {
    "title": "replaceOne()",
    "answer": "Replaces the entire document (except _id) that matches the filter.\n\nSyntax: db.collection.replaceOne(filter, replacement, options)\n\nExample:\n// Replace entire user document\ndb.users.replaceOne(\n  { email: \"john@email.com\" },\n  {\n    name: \"John Smith\",\n    email: \"john.smith@email.com\",\n    age: 30,\n    city: \"Los Angeles\"\n  }\n)\n\nNote: Unlike update operations, this replaces the entire document structure.",
    "category": "674a1b2c3d4e5f678901234b",
    "tags": ["674a1b2c3d4e5f678901234c", "674a1b2c3d4e5f6789012369"],
    "isStarred": false
  }
]
